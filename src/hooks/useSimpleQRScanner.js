import { useState, useRef, useCallback } from 'react';
import { Html5Qrcode } from 'html5-qrcode';
import { toast } from '@/hooks/use-toast';

/**
 * Hook ÿ®ÿ≥Ÿäÿ∑ ŸÑŸÇÿßÿ±ÿ¶ QR ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ©
 */
export const useSimpleQRScanner = (onScanSuccess) => {
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState(null);
  const readerRef = useRef(null);

  const startScanning = useCallback(async (elementId = 'qr-reader') => {
    console.log('üöÄ Starting Simple QR Scanner');
    
    try {
      setError(null);
      
      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ™ŸàŸÅÿ± Element
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error(`ÿßŸÑÿπŸÜÿµÿ± ${elementId} ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ`);
      }

      // ÿ•ŸÜÿ¥ÿßÿ° ŸÇÿßÿ±ÿ¶ ÿ®ÿ≥Ÿäÿ∑
      const html5QrCode = new Html5Qrcode(elementId);
      readerRef.current = html5QrCode;

      // ÿ•ÿπÿØÿßÿØÿßÿ™ ÿ®ÿ≥Ÿäÿ∑ÿ© ÿ¨ÿØÿßŸã
      const config = {
        fps: 10,
        qrbox: { width: 250, height: 250 }
      };

      // ÿ™ÿ¨ÿ±ÿ®ÿ© ÿ•ÿπÿØÿßÿØÿßÿ™ ŸÖÿÆÿ™ŸÑŸÅÿ© ŸÑŸÑŸÉÿßŸÖŸäÿ±ÿß ŸÑŸÑÿ¢ŸäŸÅŸàŸÜ
      const cameraConfigs = [
        // 1. ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß ÿßŸÑÿÆŸÑŸÅŸäÿ© ŸÑŸÑÿ¢ŸäŸÅŸàŸÜ
        { 
          width: { min: 640, ideal: 1280, max: 1920 },
          height: { min: 480, ideal: 720, max: 1080 },
          facingMode: { exact: "environment" }
        },
        // 2. ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß ÿßŸÑÿÆŸÑŸÅŸäÿ© ÿßŸÑÿπÿßÿØŸäÿ©
        { facingMode: "environment" },
        // 3. ÿ£Ÿä ŸÉÿßŸÖŸäÿ±ÿß
        { facingMode: "user" },
        // 4. ÿ®ÿØŸàŸÜ ŸÇŸäŸàÿØ
        true
      ];

      let started = false;
      for (const cameraConfig of cameraConfigs) {
        if (started) break;
        
        try {
          await html5QrCode.start(
            cameraConfig,
            config,
            (decodedText) => {
              console.log('‚úÖ QR Code found:', decodedText);
              
              // ÿßŸáÿ™ÿ≤ÿßÿ≤ ŸÑŸÑÿ¢ŸäŸÅŸàŸÜ
              if (navigator.vibrate) {
                navigator.vibrate(200);
              }
              
              toast({
                title: "‚úÖ ÿ™ŸÖ ŸÇÿ±ÿßÿ°ÿ© QR Code",
                description: `ÿßŸÑŸÉŸàÿØ: ${decodedText.substring(0, 30)}`,
                variant: "success"
              });

              onScanSuccess?.(decodedText);
            },
            () => {} // ÿ™ÿ¨ÿßŸáŸÑ ÿ£ÿÆÿ∑ÿßÿ° ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ ŸÉŸàÿØ
          );
          
          started = true;
          break;
        } catch (configError) {
          console.log('‚ö†Ô∏è ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß:', cameraConfig, configError.message);
          continue;
        }
      }

      if (!started) {
        throw new Error('ŸÅÿ¥ŸÑ ŸÅŸä ÿ™ÿ¥ÿ∫ŸäŸÑ ÿ¨ŸÖŸäÿπ ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß');
      }

      setIsScanning(true);
      console.log('‚úÖ Simple QR Scanner started');

    } catch (err) {
      console.error('‚ùå QR Scanner error:', err);
      let errorMsg = 'Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ≥ŸÖÿßÿ≠ ŸÑŸÑŸÉÿßŸÖŸäÿ±ÿß ŸàÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ';
      
      if (err.message.includes('Permission denied')) {
        errorMsg = 'Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ≥ŸÖÿßÿ≠ ŸÑŸÑŸÉÿßŸÖŸäÿ±ÿß ŸÅŸä ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖÿ™ÿµŸÅÿ≠';
      } else if (err.message.includes('NotFoundError')) {
        errorMsg = 'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÉÿßŸÖŸäÿ±ÿß ŸÖÿ™ÿßÿ≠ÿ© ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑÿ¨Ÿáÿßÿ≤';
      }
      
      setError(errorMsg);
      setIsScanning(false);
    }
  }, [onScanSuccess]);

  const stopScanning = useCallback(async () => {
    console.log('‚èπÔ∏è Stopping Simple QR Scanner');
    
    try {
      if (readerRef.current && readerRef.current.isScanning) {
        await readerRef.current.stop();
        readerRef.current = null;
      }
    } catch (err) {
      console.error('‚ö†Ô∏è Error stopping scanner:', err);
    }
    
    setIsScanning(false);
  }, []);

  return {
    isScanning,
    error,
    startScanning,
    stopScanning
  };
};