import { useState, useRef, useCallback } from 'react';
import { Html5Qrcode } from 'html5-qrcode';
import { toast } from '@/hooks/use-toast';

/**
 * Hook ÿ®ÿ≥Ÿäÿ∑ ŸÑŸÇÿßÿ±ÿ¶ QR ŸäÿπŸÖŸÑ ÿπŸÑŸâ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ©
 */
export const useSimpleQRScanner = (onScanSuccess) => {
  const [isScanning, setIsScanning] = useState(false);
  const [error, setError] = useState(null);
  const readerRef = useRef(null);

  const startScanning = useCallback(async (elementId = 'qr-reader') => {
    console.log('üöÄ Starting Simple QR Scanner');
    
    try {
      setError(null);
      
      // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ™ŸàŸÅÿ± Element
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error(`ÿßŸÑÿπŸÜÿµÿ± ${elementId} ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ`);
      }

      // ÿ•ŸÜÿ¥ÿßÿ° ŸÇÿßÿ±ÿ¶ ÿ®ÿ≥Ÿäÿ∑
      const html5QrCode = new Html5Qrcode(elementId);
      readerRef.current = html5QrCode;

      // ÿ•ÿπÿØÿßÿØÿßÿ™ ÿ®ÿ≥Ÿäÿ∑ÿ© ÿ¨ÿØÿßŸã
      const config = {
        fps: 10,
        qrbox: { width: 250, height: 250 }
      };

      // ÿ®ÿØÿ° ÿßŸÑŸÖÿ≥ÿ≠ ÿ®ÿ•ÿπÿØÿßÿØÿßÿ™ ÿ®ÿ≥Ÿäÿ∑ÿ©
      await html5QrCode.start(
        { facingMode: "environment" }, // ÿ•ÿπÿØÿßÿØÿßÿ™ ÿ®ÿ≥Ÿäÿ∑ÿ©
        config,
        (decodedText) => {
          console.log('‚úÖ QR Code found:', decodedText);
          
          toast({
            title: "‚úÖ ÿ™ŸÖ ŸÇÿ±ÿßÿ°ÿ© QR Code",
            description: `ÿßŸÑŸÉŸàÿØ: ${decodedText.substring(0, 30)}`,
            variant: "success"
          });

          onScanSuccess?.(decodedText);
        },
        (errorMessage) => {
          // ÿ™ÿ¨ÿßŸáŸÑ ÿ£ÿÆÿ∑ÿßÿ° ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ ŸÉŸàÿØ
        }
      ).catch(async (err) => {
        // ÿ•ÿ∞ÿß ŸÅÿ¥ŸÑÿå ŸÜÿ¨ÿ±ÿ® ÿ®ÿØŸàŸÜ facingMode
        console.log('‚ö†Ô∏è Retrying without facingMode...');
        await html5QrCode.start(
          true, // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÉÿßŸÖŸäÿ±ÿß ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
          config,
          (decodedText) => {
            console.log('‚úÖ QR Code found:', decodedText);
            
            toast({
              title: "‚úÖ ÿ™ŸÖ ŸÇÿ±ÿßÿ°ÿ© QR Code",
              description: `ÿßŸÑŸÉŸàÿØ: ${decodedText.substring(0, 30)}`,
              variant: "success"
            });

            onScanSuccess?.(decodedText);
          },
          (errorMessage) => {
            // ÿ™ÿ¨ÿßŸáŸÑ ÿ£ÿÆÿ∑ÿßÿ° ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ ŸÉŸàÿØ
          }
        );
      });

      setIsScanning(true);
      console.log('‚úÖ Simple QR Scanner started');

    } catch (err) {
      console.error('‚ùå QR Scanner error:', err);
      let errorMsg = 'Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ≥ŸÖÿßÿ≠ ŸÑŸÑŸÉÿßŸÖŸäÿ±ÿß ŸàÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ';
      
      if (err.message.includes('Permission denied')) {
        errorMsg = 'Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ≥ŸÖÿßÿ≠ ŸÑŸÑŸÉÿßŸÖŸäÿ±ÿß ŸÅŸä ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÖÿ™ÿµŸÅÿ≠';
      } else if (err.message.includes('NotFoundError')) {
        errorMsg = 'ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÉÿßŸÖŸäÿ±ÿß ŸÖÿ™ÿßÿ≠ÿ© ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑÿ¨Ÿáÿßÿ≤';
      }
      
      setError(errorMsg);
      setIsScanning(false);
    }
  }, [onScanSuccess]);

  const stopScanning = useCallback(async () => {
    console.log('‚èπÔ∏è Stopping Simple QR Scanner');
    
    try {
      if (readerRef.current && readerRef.current.isScanning) {
        await readerRef.current.stop();
        readerRef.current = null;
      }
    } catch (err) {
      console.error('‚ö†Ô∏è Error stopping scanner:', err);
    }
    
    setIsScanning(false);
  }, []);

  return {
    isScanning,
    error,
    startScanning,
    stopScanning
  };
};