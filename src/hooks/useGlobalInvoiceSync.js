import { useEffect, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';

// Global hook for automatic SMART invoice synchronization (no more conflicts!)
export const useGlobalInvoiceSync = () => {
  // ุงุณุชุฎุฏุงู ุงููุฒุงููุฉ ุงูุฐููุฉ ุงูุญููููุฉ ุจุฏูุงู ูู ุงููุฏููุฉ
  const smartSync = useCallback(async () => {
    try {
      const { data, error } = await supabase.functions.invoke('smart-invoice-sync', {
        body: { 
          mode: 'smart',
          sync_invoices: true,
          sync_orders: false,
          force_refresh: false // ููุท ุงูููุงุชูุฑ ุงูุฌุฏูุฏุฉ
        }
      });
      
      if (error) {
        console.warn('๐ Smart background sync failed:', error.message);
      } else if (data?.invoices_synced > 0) {
        console.log(`๐ Smart sync: ${data.invoices_synced} new invoices synced`);
        window.dispatchEvent(new CustomEvent('invoicesSynced', { 
          detail: { updatedOrders: data.invoices_synced, syncType: 'smart' } 
        }));
      } else {
        console.log('๐ Smart sync: No new invoices found');
      }
    } catch (error) {
      console.warn('Smart background sync error:', error);
    }
  }, []);

  // ุฅุจูุงุก ูุธููุฉ ุงููุฒุงููุฉ ุงูุดุงููุฉ ููุงุณุชุฎุฏุงู ุงููุฏูู ููุท
  const syncComprehensive = useCallback(async (reason = 'manual') => {
    try {
      const { data, error } = await supabase.functions.invoke('smart-invoice-sync', {
        body: { 
          mode: 'comprehensive',
          sync_invoices: true,
          sync_orders: true,
          force_refresh: true
        }
      });
      
      if (error) {
        console.warn('Comprehensive sync failed:', error.message);
      } else if (data?.invoices_synced || data?.orders_updated) {
        console.log(`โ Comprehensive sync: invoices=${data?.invoices_synced || 0}, orders=${data?.orders_updated || 0}`);
        window.dispatchEvent(new CustomEvent('invoicesSynced', { 
          detail: { 
            updatedOrders: data?.orders_updated || 0, 
            syncType: 'comprehensive' 
          } 
        }));
      }
    } catch (e) {
      console.warn('Comprehensive sync error:', e);
    }
  }, []);

  useEffect(() => {
    // ูุฒุงููุฉ ุฐููุฉ ูุงุญุฏุฉ ููุท ุนูุฏ ูุชุญ ุงูุชุทุจูู ูู ุตูุญุฉ ูุชุงุจุนุฉ ุงูููุธููู
    let shouldSync = false;
    
    // ุงูุชุญูู ูู ุงูุตูุญุฉ ุงูุญุงููุฉ
    if (window.location.pathname === '/employee-follow-up') {
      shouldSync = true;
    }
    
    if (shouldSync) {
      const initialTimer = setTimeout(() => {
        console.log('๐ ูุฒุงููุฉ ุฐููุฉ ุนูุฏ ูุชุญ ุตูุญุฉ ูุชุงุจุนุฉ ุงูููุธููู');
        smartSync(); // ููุท ูุฒุงููุฉ ุฐููุฉ ุณุฑูุนุฉ
      }, 2000);

      return () => {
        clearTimeout(initialTimer);
      };
    }
    
    // ุฅูุบุงุก ุงููุฒุงููุฉ ูู 5 ุฏูุงุฆู (ูุฒุนุฌุฉ ููุณุชูููุฉ)
    // ุณูุชู ุงุณุชุจุฏุงููุง ุจุงููุฒุงููุฉ ุงูุชููุงุฆูุฉ ูู ุงูุฎูููุฉ
  }, [smartSync]);

  return { 
    syncInvoices: smartSync, // ููุชูุงูู ูุน ุงูุฑูุฒ ุงูููุฌูุฏ
    syncComprehensive 
  };
};