/**
 * SuperProvider - ÿßŸÑÿ•ÿµÿØÿßÿ± ÿßŸÑÿ¢ŸÖŸÜ ÿßŸÑÿπÿßÿ¨ŸÑ
 * ÿ•ÿµŸÑÿßÿ≠ ŸÅŸàÿ±Ÿä ŸÑÿßÿ≥ÿ™ÿπÿßÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
 */

import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/UnifiedAuthContext';
import { usePermissions } from '@/hooks/usePermissions';
import { useNotifications } from '@/contexts/NotificationsContext';
import { useNotificationsSystem } from '@/contexts/NotificationsSystemContext';
import { useCart } from '@/hooks/useCart.jsx';
import { supabase } from '@/integrations/supabase/client';

const SuperContext = createContext();

export const useSuper = () => {
  const context = useContext(SuperContext);
  if (!context) {
    throw new Error('useSuper must be used within a SuperProvider');
  }
  return context;
};

// ÿ•ÿ∂ÿßŸÅÿ© alias ŸÑŸÑÿ™ŸàÿßŸÅŸÇ ÿßŸÑÿπŸÉÿ≥Ÿä
export const useInventory = () => {
  return useSuper();
};

export const SuperProvider = ({ children }) => {
  const { user } = useAuth();
  const { hasPermission } = usePermissions();
  const { addNotification } = useNotifications();
  const { notifyLowStock } = useNotificationsSystem();
  
  // ÿ•ÿ∂ÿßŸÅÿ© Ÿàÿ∏ÿßÿ¶ŸÅ ÿßŸÑÿ≥ŸÑÿ©
  const { cart, addToCart, removeFromCart, updateCartItemQuantity, clearCart } = useCart();
  
  // ÿ≠ÿßŸÑÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ - ÿ®ÿ≥Ÿäÿ∑ÿ© Ÿàÿ¢ŸÖŸÜÿ©
  const [allData, setAllData] = useState({
    products: [],
    orders: [],
    customers: [],
    purchases: [],
    expenses: [],
    profits: [],
    cashSources: [],
    settings: { 
      deliveryFee: 5000, 
      lowStockThreshold: 5, 
      mediumStockThreshold: 10, 
      sku_prefix: "PROD", 
      lastPurchaseId: 0,
      printer: { paperSize: 'a4', orientation: 'portrait' }
    },
    aiOrders: [],
    profitRules: [],
    colors: [],
    sizes: [],
    categories: [],
    departments: [],
    productTypes: [],
    seasons: []
  });
  
  const [loading, setLoading] = useState(true);
  const [accounting, setAccounting] = useState({ 
    capital: 10000000, 
    expenses: [] 
  });

  // ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ - ÿßŸÑÿ•ÿµÿØÿßÿ± ÿßŸÑÿ¢ŸÖŸÜ
  const fetchAllData = useCallback(async () => {
    if (!user) {
      console.log('‚ö†Ô∏è SuperProvider SAFE: ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖÿ≥ÿ™ÿÆÿØŸÖ');
      setLoading(false);
      return;
    }
    
    try {
      setLoading(true);
      console.log('üöÄ SuperProvider SAFE: ÿ®ÿØÿ° ÿ¨ŸÑÿ® ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ:', user.full_name || user.email);
      
      // ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÅŸÇÿ∑ ÿ£ŸàŸÑÿßŸã
      const { data: products, error: productsError } = await supabase
        .from('products')
        .select(`
          *,
          product_variants (
            *,
            colors (id, name, hex_code),
            sizes (id, name, type),
            inventory (quantity, min_stock, reserved_quantity, location)
          )
        `)
        .eq('is_active', true)
        .order('created_at', { ascending: false });

      console.log('üìä SuperProvider SAFE: ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:', {
        error: productsError,
        count: products?.length || 0
      });

      if (productsError) {
        console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:', productsError);
        setAllData(prev => ({ ...prev, products: [] }));
        setLoading(false);
        return;
      }

      // ÿ¨ŸÑÿ® ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™
      const { data: orders, error: ordersError } = await supabase
        .from('orders')
        .select('*')
        .order('created_at', { ascending: false });

      console.log('üìä SuperProvider SAFE: ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™:', {
        error: ordersError,
        count: orders?.length || 0
      });

      // ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ - ÿ®ÿ≥Ÿäÿ∑ÿ© Ÿàÿ¢ŸÖŸÜÿ©
      const processedProducts = (products || []).map(product => {
        const processedVariants = (product.product_variants || []).map(variant => {
          const quantity = variant.inventory?.quantity || variant.quantity || 0;
          
          console.log(`üì¶ SAFE: ŸÖÿ™ÿ∫Ÿäÿ± ${variant.id} - ÿßŸÑŸÉŸÖŸäÿ©: ${quantity}`);
          
          return {
            ...variant,
            quantity: quantity,
            reserved_quantity: variant.inventory?.reserved_quantity || 0,
            size: variant.sizes?.name || 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ',
            color: variant.colors?.name || 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ'
          };
        });
        
        console.log(`üîß SAFE: ŸÖŸÜÿ™ÿ¨ ${product.name} - ${processedVariants.length} ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™`);
        
        return {
          ...product,
          variants: processedVariants
        };
      });

      const finalData = {
        products: processedProducts,
        orders: orders || [],
        customers: [],
        purchases: [],
        expenses: [],
        profits: [],
        cashSources: [],
        settings: { 
          deliveryFee: 5000, 
          lowStockThreshold: 5, 
          mediumStockThreshold: 10, 
          sku_prefix: "PROD", 
          lastPurchaseId: 0,
          printer: { paperSize: 'a4', orientation: 'portrait' }
        },
        aiOrders: [],
        profitRules: [],
        colors: [],
        sizes: [],
        categories: [],
        departments: [],
        productTypes: [],
        seasons: []
      };

      console.log('‚úÖ SuperProvider SAFE: ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ©:', {
        products: finalData.products?.length || 0,
        orders: finalData.orders?.length || 0,
        firstProduct: finalData.products?.[0] ? {
          name: finalData.products[0].name,
          variants: finalData.products[0].variants?.length || 0
        } : null
      });

      setAllData(finalData);
      
    } catch (error) {
      console.error('‚ùå SuperProvider SAFE: ÿÆÿ∑ÿ£ ÿπÿßŸÖ:', error);
      
      // ÿßÿ≥ÿ™ÿπÿßÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©
      setAllData({
        products: [],
        orders: [],
        customers: [],
        purchases: [],
        expenses: [],
        profits: [],
        cashSources: [],
        settings: { 
          deliveryFee: 5000, 
          lowStockThreshold: 5, 
          mediumStockThreshold: 10, 
          sku_prefix: "PROD", 
          lastPurchaseId: 0,
          printer: { paperSize: 'a4', orientation: 'portrait' }
        },
        aiOrders: [],
        profitRules: [],
        colors: [],
        sizes: [],
        categories: [],
        departments: [],
        productTypes: [],
        seasons: []
      });
    } finally {
      setLoading(false);
    }
  }, [user]);

  // ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÜÿØ ÿ®ÿØÿ° ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
  useEffect(() => {
    fetchAllData();
  }, [fetchAllData]);

  // Ÿàÿ∏ÿßÿ¶ŸÅ ÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÑŸÑÿ™ŸàÿßŸÅŸÇ
  const createOrder = useCallback(async () => ({ success: false, error: 'ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã' }), []);
  const updateOrder = useCallback(async () => ({ success: false, error: 'ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã' }), []);
  const deleteOrders = useCallback(async () => ({ success: false, error: 'ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã' }), []);
  const addExpense = useCallback(async () => ({ success: false, error: 'ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã' }), []);
  const refreshOrders = useCallback(() => fetchAllData(), [fetchAllData]);
  const refreshProducts = useCallback(() => fetchAllData(), [fetchAllData]);
  const approveAiOrder = useCallback(async () => ({ success: false }), []);

  // ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÖÿ±ÿ¨ÿπÿ© - ÿ¢ŸÖŸÜÿ© ŸàŸÖÿ®ÿ≥ÿ∑ÿ©
  const contextValue = {
    // ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
    products: allData.products || [],
    orders: allData.orders || [],
    customers: allData.customers || [],
    purchases: allData.purchases || [],
    expenses: allData.expenses || [],
    profits: allData.profits || [],
    aiOrders: allData.aiOrders || [],
    settings: allData.settings,
    accounting: accounting,
    
    // ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ±ÿ¥ÿ≠ÿßÿ™
    categories: allData.categories || [],
    departments: allData.departments || [],
    allColors: allData.colors || [],
    allSizes: allData.sizes || [],
    
    // ÿ≠ÿßŸÑÿ© ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
    loading: loading,
    
    // Ÿàÿ∏ÿßÿ¶ŸÅ ÿßŸÑÿ≥ŸÑÿ©
    cart: cart || [],
    addToCart: addToCart || (() => {}),
    removeFromCart: removeFromCart || (() => {}),
    updateCartItemQuantity: updateCartItemQuantity || (() => {}),
    clearCart: clearCart || (() => {}),
    
    // ÿßŸÑŸàÿ∏ÿßÿ¶ŸÅ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
    createOrder,
    updateOrder,
    deleteOrders,
    addExpense,
    refreshOrders,
    refreshProducts,
    approveAiOrder,
    
    // Ÿàÿ∏ÿßÿ¶ŸÅ ŸÑŸÑÿ™ŸàÿßŸÅŸÇ
    addProduct: () => console.log('addProduct - ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã'),
    updateProduct: () => console.log('updateProduct - ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã'),
    deleteProducts: () => console.log('deleteProducts - ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã'),
    updateVariantStock: () => console.log('updateVariantStock - ÿ≥Ÿäÿ™ŸÖ ÿ™ÿ∑ÿ®ŸäŸÇŸáÿß ŸÑÿßÿ≠ŸÇÿßŸã'),
    getLowStockProducts: () => [],
    calculateProfit: () => 0,
    calculateManagerProfit: () => 0,
  };

  console.log('üîç SuperProvider SAFE contextValue:', {
    productsCount: contextValue.products?.length || 0,
    ordersCount: contextValue.orders?.length || 0,
    loading: contextValue.loading
  });

  return (
    <SuperContext.Provider value={contextValue}>
      {children}
    </SuperContext.Provider>
  );
};