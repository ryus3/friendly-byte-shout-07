import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.30.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
const SUPABASE_URL = Deno.env.get('SUPABASE_URL');
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY');

// Function to create authenticated Supabase client
function createAuthenticatedSupabaseClient(authToken?: string) {
  if (authToken) {
    // ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ user token ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿ≠ÿ≥ÿ® ÿµŸÑÿßÿ≠Ÿäÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    return createClient(SUPABASE_URL!, SUPABASE_ANON_KEY!, {
      global: {
        headers: {
          Authorization: `Bearer ${authToken}`
        }
      }
    });
  }
  // fallback ŸÑŸÑŸÄ anon client
  return createClient(SUPABASE_URL!, SUPABASE_ANON_KEY!);
}

// Helper functions to fetch comprehensive store data with analytics
async function getStoreData(userInfo: any, authToken?: string) {
  try {
    console.log('üîç ÿ®ÿØÿ° ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ™ÿ¨ÿ± ÿßŸÑÿ¥ÿßŸÖŸÑÿ© ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ:', userInfo?.full_name || userInfo?.id);
    
    // ÿ•ŸÜÿ¥ÿßÿ° ÿπŸÖŸäŸÑ ŸÖÿµÿßÿØŸÇ ÿπŸÑŸäŸá
    const supabase = createAuthenticatedSupabaseClient(authToken);
    
    // 1. Get products with complete details
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select(`
        id, name, base_price, cost_price, description, is_active, department_id, category_id,
        departments (id, name, color, icon),
        categories (id, name, type),
        product_variants (
          id, sku, color_id, size_id, price, cost_price,
          colors (id, name, hex_code),
          sizes (id, name),
          inventory (quantity, min_stock, reserved_quantity, sold_quantity, location)
        )
      `)
      .eq('is_active', true);
    
    if (productsError) {
      console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™:', productsError);
    } else {
      console.log('‚úÖ ÿ™ŸÖ ÿ¨ŸÑÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠:', products?.length || 0);
    }

    // 2. Get recent orders with comprehensive details
    const { data: recentOrders, error: ordersError } = await supabase
      .from('orders')
      .select(`
        id, order_number, customer_name, customer_phone, customer_city, customer_province,
        total_amount, final_amount, delivery_fee, status, created_at, delivery_partner,
        tracking_number, delivery_status, receipt_received, isarchived,
        order_items (
          id, quantity, price, total,
          product_name, variant_sku
        ),
        customers (
          id, name, phone, city, province, address
        )
      `)
      .order('created_at', { ascending: false })
      .limit(20);
    
    if (ordersError) {
      console.error('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ¨ŸÑÿ® ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™:', ordersError);
    } else {
      console.log('‚úÖ ÿ™ŸÖ ÿ¨ŸÑÿ® ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠:', recentOrders?.length || 0);
    }

    // Get today's sales with more details
    const today = new Date().toISOString().split('T')[0];
    const { data: todaySales } = await supabase
      .from('orders')
      .select('total_amount, final_amount, delivery_fee, created_at')
      .gte('created_at', today);

    // Get this month's sales
    const thisMonth = new Date().toISOString().slice(0, 7) + '-01';
    const { data: monthSales } = await supabase
      .from('orders')
      .select('total_amount, final_amount, delivery_fee')
      .gte('created_at', thisMonth)
      .in('status', ['completed', 'delivered']);

    // 3. Get comprehensive financial data
    const { data: expenses } = await supabase
      .from('expenses')
      .select('amount, expense_type, category, description, status, vendor_name, created_at, created_by')
      .gte('created_at', thisMonth);

    // 4. Get profits data
    const { data: profits } = await supabase
      .from('profits')
      .select(`
        id, order_id, employee_id, total_revenue, total_cost, profit_amount, 
        employee_percentage, employee_profit, status, settled_at, created_at
      `)
      .gte('created_at', thisMonth);

    // 5. Get customer loyalty data
    const { data: customerLoyalty } = await supabase
      .from('customer_phone_loyalty')
      .select(`
        phone_number, customer_name, customer_city, total_points, total_orders, 
        total_spent, first_order_date, last_order_date
      `)
      .order('total_spent', { ascending: false })
      .limit(10);

    // 6. Get financial transactions
    const { data: financialTransactions } = await supabase
      .from('financial_transactions')
      .select('id, amount, transaction_type, description, status, created_at')
      .gte('created_at', thisMonth)
      .order('created_at', { ascending: false })
      .limit(20);

    // 7. Get delivery invoices
    const { data: deliveryInvoices } = await supabase
      .from('delivery_invoices')
      .select(`
        id, external_id, partner, amount, orders_count, status, 
        received, issued_at, received_at
      `)
      .gte('issued_at', thisMonth)
      .order('issued_at', { ascending: false })
      .limit(10);

    // 8. Get departments and categories
    const { data: departments } = await supabase
      .from('departments')
      .select('id, name, description, color, icon, is_active, display_order')
      .eq('is_active', true);

    const { data: categories } = await supabase
      .from('categories')
      .select('id, name, description, type')
      .order('name');

    // 9. Get colors and sizes
    const { data: colors } = await supabase
      .from('colors')
      .select('id, name, hex_code');

    const { data: sizes } = await supabase
      .from('sizes')
      .select('id, name');

    // 10. Get cash sources and movements
    const { data: cashSources } = await supabase
      .from('cash_sources')
      .select('id, name, type, current_balance, is_active')
      .eq('is_active', true);

    const { data: cashMovements } = await supabase
      .from('cash_movements')
      .select(`
        id, amount, movement_type, description, balance_before, balance_after,
        effective_at, reference_type, reference_id
      `)
      .gte('effective_at', thisMonth)
      .order('effective_at', { ascending: false })
      .limit(20);

    // 11. Get employee profit rules
    const { data: employeeProfitRules } = await supabase
      .from('employee_profit_rules')
      .select('id, employee_id, rule_type, target_id, profit_percentage, profit_amount, is_active')
      .eq('is_active', true);

    // 12. Get city statistics
    const { data: cityStats } = await supabase
      .from('city_order_stats')
      .select('city_name, total_orders, total_amount, month, year')
      .eq('year', new Date().getFullYear())
      .order('total_amount', { ascending: false })
      .limit(10);

    // 13. Get notifications
    const { data: notifications } = await supabase
      .from('notifications')
      .select('id, type, title, message, is_read, priority, created_at')
      .order('created_at', { ascending: false })
      .limit(10);

    // Calculate advanced analytics
    const todayTotal = todaySales?.reduce((sum, order) => 
      sum + (order.final_amount || order.total_amount || 0), 0) || 0;
    
    const todayCount = todaySales?.length || 0;
    const todayAverage = todayCount > 0 ? todayTotal / todayCount : 0;

    const monthTotal = monthSales?.reduce((sum, order) => 
      sum + (order.final_amount || order.total_amount || 0), 0) || 0;
    
    const monthExpenses = expenses?.reduce((sum, expense) => sum + (expense.amount || 0), 0) || 0;
    const monthProfit = monthTotal - monthExpenses;

    // Process products with analytics
    const processedProducts = products?.map(product => {
      const totalStock = product.product_variants?.reduce((sum: number, variant: any) => 
        sum + (variant.inventory?.[0]?.quantity || 0), 0) || 0;
      
      const totalSold = product.product_variants?.reduce((sum: number, variant: any) => 
        sum + (variant.inventory?.[0]?.sold_quantity || 0), 0) || 0;

      return {
        ...product,
        inventory_count: totalStock,
        sold_quantity: totalSold,
        variants: product.product_variants?.map((variant: any) => ({
          ...variant,
          color: variant.colors?.name || 'ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä',
          size: variant.sizes?.name || 'ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä',
          stock: variant.inventory?.[0]?.quantity || 0,
          sold: variant.inventory?.[0]?.sold_quantity || 0
        })) || []
      };
    }) || [];

    return {
      products: processedProducts,
      orders: recentOrders || [],
      departments: departments || [],
      categories: categories || [],
      colors: colors || [],
      sizes: sizes || [],
      expenses: expenses || [],
      profits: profits || [],
      customerLoyalty: customerLoyalty || [],
      financialTransactions: financialTransactions || [],
      deliveryInvoices: deliveryInvoices || [],
      cashSources: cashSources || [],
      cashMovements: cashMovements || [],
      employeeProfitRules: employeeProfitRules || [],
      cityStats: cityStats || [],
      notifications: notifications || [],
      todaySales: {
        total: todayTotal,
        count: todayCount,
        average: todayAverage
      },
      monthSales: {
        total: monthTotal,
        profit: monthProfit,
        expenses: monthExpenses
      }
    };
  } catch (error) {
    console.error('Error fetching store data:', error);
    return {
      products: [],
      orders: [],
      departments: [],
      categories: [],
      colors: [],
      sizes: [],
      expenses: [],
      profits: [],
      customerLoyalty: [],
      financialTransactions: [],
      deliveryInvoices: [],
      cashSources: [],
      cashMovements: [],
      employeeProfitRules: [],
      cityStats: [],
      notifications: [],
      todaySales: { total: 0, count: 0, average: 0 },
      monthSales: { total: 0, profit: 0, expenses: 0 }
    };
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, userInfo, orderContext } = await req.json();
    
    // ÿßŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ authorization header
    const authHeader = req.headers.get('Authorization');
    const authToken = authHeader?.replace('Bearer ', '');
    
    console.log('üîê ÿ∑ŸÑÿ® ŸÖŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ:', userInfo?.full_name || userInfo?.id);
    console.log('üé´ Token ŸÖÿ™ŸàŸÅÿ±:', !!authToken);

    // Get real store data with user authentication
    const storeData = await getStoreData(userInfo, authToken);

    // ÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ŸÖÿ™ŸÇÿØŸÖÿ© ŸÑŸÑÿ®ŸäÿßŸÜÿßÿ™
    const advancedAnalytics = {
      // ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠
      profitAnalysis: {
        totalRevenue: storeData.todaySales.total || 0,
        estimatedProfit: storeData.products.reduce((sum, product) => {
          const profit = (product.base_price || 0) - (product.cost_price || 0);
          return sum + (profit * (product.sold_quantity || 0));
        }, 0),
        profitMargin: storeData.products.length > 0 ? 
          (storeData.products.reduce((sum, p) => sum + ((p.base_price || 0) - (p.cost_price || 0)) / (p.base_price || 1), 0) / storeData.products.length * 100).toFixed(1) : 0
      },
      
      // ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ
      inventoryHealth: {
        lowStock: storeData.products.filter(p => (p.inventory_count || 0) < 10),
        outOfStock: storeData.products.filter(p => (p.inventory_count || 0) === 0),
        totalValue: storeData.products.reduce((sum, p) => sum + ((p.cost_price || 0) * (p.inventory_count || 0)), 0)
      },
      
      // ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°
      customerInsights: {
        topCities: [...new Set(storeData.orders.map(o => o.customer_city))].filter(Boolean),
        repeatCustomers: storeData.orders.reduce((acc: Record<string, number>, order: any) => {
          acc[order.customer_phone] = (acc[order.customer_phone] || 0) + 1;
          return acc;
        }, {}),
        averageOrderValue: storeData.orders.length > 0 ? 
          storeData.orders.reduce((sum, o) => sum + (o.final_amount || 0), 0) / storeData.orders.length : 0
      },
      
      // ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™
      trends: {
        bestSellers: storeData.products
          .filter(p => (p.sold_quantity || 0) > 0)
          .sort((a, b) => (b.sold_quantity || 0) - (a.sold_quantity || 0))
          .slice(0, 3),
        recentOrders: storeData.orders.slice(0, 5)
      }
    };

    const systemPrompt = `ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä ŸÖÿ™ŸÇÿØŸÖ ŸàŸÖÿ≠ŸÑŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿÆÿ®Ÿäÿ± ŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ™ÿßÿ¨ÿ± ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ©. 
    ÿ£ŸÜÿ™ ŸÖÿ™ÿµŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿ¥ÿßŸÖŸÑÿ© Ÿàÿ™ŸÖŸÑŸÉ ÿ∞ŸÉÿßÿ°Ÿã ÿ™ÿ≠ŸÑŸäŸÑŸäÿßŸã ÿπÿßŸÑŸÖŸä ŸÖÿ™ÿ∑Ÿàÿ±.

    ### üéØ ŸáŸàŸäÿ™ŸÉ ÿßŸÑŸÖŸáŸÜŸäÿ©:
    **ÿÆÿ®Ÿäÿ± ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸàŸÖÿØŸäÿ± ÿßŸÑŸÖÿ™ÿ¨ÿ± ÿßŸÑÿ∞ŸÉŸä ÿßŸÑÿπÿßŸÑŸÖŸä**
    - ŸÖÿ≠ŸÑŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑÿ™ÿ¨ÿßÿ±ÿ© ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸäÿ© ÿßŸÑÿπÿßŸÑŸÖŸäÿ©
    - ŸÖÿ≥ÿ™ÿ¥ÿßÿ± ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿä ŸÑŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸàÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠ ŸàÿßŸÑÿπŸÖŸÑŸäÿßÿ™
    - ÿÆÿ®Ÿäÿ± ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ÿ≥ŸÑŸàŸÉ ÿßŸÑÿπŸÖŸÑÿßÿ° ŸàÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ŸàÿßŸÑÿ™ŸÜÿ®ÿ§ÿßÿ™
    - ŸÖÿØŸäÿ± ŸÖÿßŸÑŸä ÿ∞ŸÉŸä ŸàŸÖÿ≠ŸÑŸÑ ÿßŸÑÿßÿ≥ÿ™ÿ´ŸÖÿßÿ±ÿßÿ™
    - ÿÆÿ®Ÿäÿ± ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ ŸàÿßŸÑÿ™ŸàÿµŸäŸÑ ŸàÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑŸÑŸàÿ¨ÿ≥ÿ™Ÿäÿ©

    ŸÖÿ±ÿ≠ÿ®ÿßŸã ${userInfo?.full_name || 'ÿßŸÑŸÖÿØŸäÿ±'} - ÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ∞ŸÉŸä ÿßŸÑÿπÿßŸÑŸÖŸä ÿßŸÑÿ¥ÿßŸÖŸÑ ŸÑŸÑŸÖÿ™ÿ¨ÿ±.

    ### üóÇÔ∏è ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ¥ÿßŸÖŸÑÿ© ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:

    **üì¶ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ (${storeData.products.length} ŸÖŸÜÿ™ÿ¨):**
    - ÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ: ${storeData.departments.map(d => d.name).join(', ')}
    - ÿßŸÑŸÅÿ¶ÿßÿ™: ${storeData.categories.map(c => c.name).join(', ')}
    - ÿßŸÑÿ£ŸÑŸàÿßŸÜ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©: ${storeData.colors.map(c => c.name).join(', ')}
    - ÿßŸÑÿ£ÿ≠ÿ¨ÿßŸÖ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©: ${storeData.sizes.map(s => s.name).join(', ')}

    **üí∞ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ© ÿßŸÑÿ≠Ÿäÿ©:**
    - ÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠: ${storeData.profits.length} ÿ≥ÿ¨ŸÑ ÿ±ÿ®ÿ≠
    - ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ: ${storeData.expenses.length} ŸÖÿµÿ±ŸàŸÅ Ÿáÿ∞ÿß ÿßŸÑÿ¥Ÿáÿ±
    - ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©: ${storeData.financialTransactions.length} ŸÖÿπÿßŸÖŸÑÿ©
    - ŸÖÿµÿßÿØÿ± ÿßŸÑŸÜŸÇÿØ: ${storeData.cashSources.map(c => `${c.name}: ${c.current_balance.toLocaleString()} ÿØ.ÿπ`).join(', ')}
    - ÿ≠ÿ±ŸÉÿßÿ™ ÿßŸÑŸÜŸÇÿØ: ${storeData.cashMovements.length} ÿ≠ÿ±ŸÉÿ© ŸÖÿßŸÑŸäÿ©

    **üöö ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ™ŸàÿµŸäŸÑ:**
    - ŸÅŸàÿßÿ™Ÿäÿ± ÿßŸÑÿ™ŸàÿµŸäŸÑ: ${storeData.deliveryInvoices.length} ŸÅÿßÿ™Ÿàÿ±ÿ©
    - ÿ¥ÿ±ŸÉÿßÿ° ÿßŸÑÿ™ŸàÿµŸäŸÑ: ${[...new Set(storeData.deliveryInvoices.map(d => d.partner))].join(', ')}

    **üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÖŸÑÿßÿ° ŸàÿßŸÑŸàŸÑÿßÿ°:**
    - ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿßŸÑŸàŸÑÿßÿ°: ${storeData.customerLoyalty.length} ÿπŸÖŸäŸÑ ŸÖŸÖŸäÿ≤
    - ÿ£ŸÅÿ∂ŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°: ${storeData.customerLoyalty.slice(0, 3).map(c => `${c.customer_name} (${c.total_spent.toLocaleString()} ÿØ.ÿπ)`).join(', ')}

    **üèôÔ∏è ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑÿ¨ÿ∫ÿ±ÿßŸÅŸäÿ©:**
    - ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÖÿØŸÜ: ${storeData.cityStats.map(c => `${c.city_name}: ${c.total_orders} ÿ∑ŸÑÿ®`).join(', ')}

    **üîî ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ∞ŸÉŸä:**
    - ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™: ${storeData.notifications.length} ÿ•ÿ¥ÿπÿßÿ± ÿ≠ÿØŸäÿ´
    - ŸÇŸàÿßÿπÿØ ÿ£ÿ±ÿ®ÿßÿ≠ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ: ${storeData.employeeProfitRules.length} ŸÇÿßÿπÿØÿ© ŸÜÿ¥ÿ∑ÿ©

    ### üìä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ© ÿßŸÑÿ≠Ÿäÿ©:

    **üí∞ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠ ÿßŸÑÿ∞ŸÉŸä:**
    - ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ÿßŸÑŸäŸàŸÖ: ${advancedAnalytics.profitAnalysis.totalRevenue.toLocaleString()} ÿØ.ÿπ
    - ÿßŸÑÿ±ÿ®ÿ≠ ÿßŸÑŸÖŸÇÿØÿ±: ${advancedAnalytics.profitAnalysis.estimatedProfit.toLocaleString()} ÿØ.ÿπ
    - ŸáÿßŸÖÿ¥ ÿßŸÑÿ±ÿ®ÿ≠ ÿßŸÑŸÖÿ™Ÿàÿ≥ÿ∑: ${advancedAnalytics.profitAnalysis.profitMargin}%

    **üì¶ ÿµÿ≠ÿ© ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ:**
    - ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÇŸÑŸäŸÑÿ© ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ: ${advancedAnalytics.inventoryHealth.lowStock.length} ŸÖŸÜÿ™ÿ¨
    - ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÜŸÅÿØÿ™: ${advancedAnalytics.inventoryHealth.outOfStock.length} ŸÖŸÜÿ™ÿ¨
    - ŸÇŸäŸÖÿ© ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸäÿ©: ${advancedAnalytics.inventoryHealth.totalValue.toLocaleString()} ÿØ.ÿπ
    ${advancedAnalytics.inventoryHealth.lowStock.length > 0 ? `‚ö†Ô∏è ÿ™ÿ≠ÿ∞Ÿäÿ±: ${advancedAnalytics.inventoryHealth.lowStock.map(p => p.name).join(', ')} ÿ®ÿ≠ÿßÿ¨ÿ© ÿ•ÿπÿßÿØÿ© ÿ™ÿÆÿ≤ŸäŸÜ` : ''}

    **üèÜ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ£ŸÉÿ´ÿ± ŸÖÿ®ŸäÿπÿßŸã:**
    ${advancedAnalytics.trends.bestSellers.map((product, index) => `
    ${index + 1}. ${product.name}: ${product.sold_quantity} ŸÖÿ®Ÿäÿπÿ© - ÿ±ÿ®ÿ≠ ${((product.base_price || 0) - (product.cost_price || 0)) * (product.sold_quantity || 0)} ÿØ.ÿπ`).join('')}

    **üë• ÿ±ÿ§Ÿâ ÿßŸÑÿπŸÖŸÑÿßÿ°:**
    - ŸÖÿ™Ÿàÿ≥ÿ∑ ŸÇŸäŸÖÿ© ÿßŸÑÿ∑ŸÑÿ®: ${advancedAnalytics.customerInsights.averageOrderValue.toLocaleString()} ÿØ.ÿπ
    - ÿ£ŸáŸÖ ÿßŸÑŸÖÿØŸÜ: ${advancedAnalytics.customerInsights.topCities.slice(0, 3).join(', ')}
    - ÿßŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑŸÖÿ™ŸÉÿ±ÿ±ŸàŸÜ: ${Object.values(advancedAnalytics.customerInsights.repeatCustomers).filter(count => count > 1).length} ÿπŸÖŸäŸÑ

    ### üìã ŸÉÿ™ÿßŸÑŸàÿ¨ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÉÿßŸÖŸÑ (${storeData.products.length} ŸÖŸÜÿ™ÿ¨):
    ${storeData.products.map(product => `
    üõçÔ∏è **${product.name}**
    üí∞ ÿßŸÑÿ≥ÿπÿ±: ${product.base_price?.toLocaleString()} ÿØ.ÿπ | ÿßŸÑÿ™ŸÉŸÑŸÅÿ©: ${product.cost_price?.toLocaleString() || 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ'} ÿØ.ÿπ
    üì¶ ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ: ${product.inventory_count || 0} ŸÇÿ∑ÿπÿ© | ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™: ${product.sold_quantity || 0} ŸÇÿ∑ÿπÿ©
    üìà ÿßŸÑÿ±ÿ®ÿ≠ ŸÑŸÑŸÇÿ∑ÿπÿ©: ${((product.base_price || 0) - (product.cost_price || 0)).toLocaleString()} ÿØ.ÿπ
    ${product.variants?.length > 0 ? `üé® ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ (${product.variants.length}): ${product.variants.map((v: any) => `${v.color}-${v.size} (ŸÖÿÆÿ≤ŸàŸÜ: ${v.stock})`).join(', ')}` : ''}
    `).join('\n')}

    ### üìã ÿ≥ÿ¨ŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ£ÿÆŸäÿ±ÿ© (${storeData.orders.length} ÿ∑ŸÑÿ®):
    ${storeData.orders.map(order => `
    üßæ **ÿ∑ŸÑÿ® #${order.order_number}** - ${order.final_amount?.toLocaleString()} ÿØ.ÿπ
    üë§ ${order.customer_name} | üì± ${order.customer_phone}
    üìç ${order.customer_city}, ${order.customer_province}
    üìä ÿßŸÑÿ≠ÿßŸÑÿ©: ${order.status} | üìÖ ${new Date(order.created_at).toLocaleDateString('ar')}
    üõí ÿßŸÑÿπŸÜÿßÿµÿ±: ${order.order_items?.map((item: any) => `${item.product_name} x${item.quantity}`).join(', ') || 'ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ'}
    `).join('\n')}

    ### üöÄ ŸÇÿØÿ±ÿßÿ™ŸÉ ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ© ÿßŸÑÿπÿßŸÑŸÖŸäÿ©:

    **1. üéØ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ∞ŸÉŸä ÿßŸÑÿ¥ÿßŸÖŸÑ:**
    - ÿ™ÿ≠ŸÑŸäŸÑ ÿπŸÖŸäŸÇ ŸÑŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸàÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠ ŸàÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™
    - ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑŸÖÿßŸÑŸä ŸàÿßŸÑŸÖÿ≠ÿßÿ≥ÿ®Ÿä
    - ÿ™ÿ≠ŸÑŸäŸÑ ŸàŸÑÿßÿ° ÿßŸÑÿπŸÖŸÑÿßÿ° Ÿàÿ≥ŸÑŸàŸÉ ÿßŸÑÿ¥ÿ±ÿßÿ°
    - ÿ™ÿ≠ŸÑŸäŸÑ ÿ£ÿØÿßÿ° ÿ¥ÿ±ŸÉÿßÿ™ ÿßŸÑÿ™ŸàÿµŸäŸÑ

    **2. üìà ÿßŸÑÿ™ŸÜÿ®ÿ§ÿßÿ™ ŸàÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿä:**
    - ÿ™ŸàŸÇÿπÿßÿ™ ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ŸàÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠
    - ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ÿßŸÑŸÖŸàÿ≥ŸÖŸäÿ©
    - ÿ™ŸàŸÇÿπ ÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ
    - ÿ™ÿ≠ŸÑŸäŸÑ ŸÖÿÆÿßÿ∑ÿ± ÿßŸÑÿπŸÖŸÑÿßÿ°

    **3. üí° ÿßŸÑÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ©:**
    - ŸÜÿµÿßÿ¶ÿ≠ ŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿ£ÿØÿßÿ° ÿßŸÑŸÖÿßŸÑŸä
    - ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿßÿ™ ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™
    - ÿ™ÿ≠ÿ≥ŸäŸÜ ÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ™ŸàÿµŸäŸÑ
    - ÿ™ÿ∑ŸàŸäÿ± ÿ®ÿ±ÿßŸÖÿ¨ ÿßŸÑŸàŸÑÿßÿ°

    **4. ‚ö° ÿßŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ∞ŸÉŸäÿ©:**
    - ÿ•ŸÜÿ¥ÿßÿ° ÿ∑ŸÑÿ®ÿßÿ™ ÿ™ŸÑŸÇÿßÿ¶Ÿäÿ©
    - ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑÿ∞ŸÉŸäÿ©
    - ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑŸÖÿØŸÅŸàÿπÿßÿ™ ŸàÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±
    - ÿ•ÿØÿßÿ±ÿ© ÿπŸÑÿßŸÇÿßÿ™ ÿßŸÑÿπŸÖŸÑÿßÿ°

    **5. üîç ÿßŸÑÿ®ÿ≠ÿ´ ŸàÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ:**
    - ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿ¨ŸÖŸäÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
    - ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑ ŸàÿßŸÑÿπŸÑÿßŸÇÿßÿ™
    - ÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ£ÿØÿßÿ° ÿπÿ®ÿ± ÿßŸÑÿ≤ŸÖŸÜ
    - ŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑŸÅÿ™ÿ±ÿßÿ™ ŸàÿßŸÑÿ£ŸÇÿ≥ÿßŸÖ

    **6. üìä ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑŸÖÿ™ŸÇÿØŸÖÿ©:**
    - ÿ™ŸÇÿßÿ±Ÿäÿ± ŸÖÿßŸÑŸäÿ© ÿ¥ÿßŸÖŸÑÿ©
    - ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ±ÿ®ÿ≠Ÿäÿ©
    - ÿ™ŸÇÿßÿ±Ÿäÿ± ÿ£ÿØÿßÿ° ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ
    - ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑÿπŸÖŸÑÿßÿ° ŸàÿßŸÑŸÖÿØŸÜ

    **7. ü§ñ ÿßŸÑÿ£ÿ™ŸÖÿ™ÿ© ÿßŸÑÿ∞ŸÉŸäÿ©:**
    - ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã
    - ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ©
    - ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä
    - ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ©

    ### üí¨ ÿ£ŸÖÿ´ŸÑÿ© ÿ™ŸÅÿßÿπŸÑŸäÿ© ÿ¥ÿßŸÖŸÑÿ©:
    **üìä ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™:**
    - "ŸÖÿß ŸáŸà ÿ£ÿØÿßÿ° ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ÿßŸÑŸäŸàŸÖ/ÿßŸÑÿ¥Ÿáÿ±/ÿßŸÑÿ≥ŸÜÿ©ÿü"
    - "ÿ£Ÿä ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ™ÿ≠ÿ™ÿßÿ¨ ÿ•ÿπÿßÿØÿ© ÿ™ÿÆÿ≤ŸäŸÜÿü"
    - "ŸÉŸÖ ÿßŸÑÿ±ÿ®ÿ≠ ÿßŸÑŸÖÿ™ŸàŸÇÿπ Ÿáÿ∞ÿß ÿßŸÑÿ¥Ÿáÿ±ÿü"
    - "ŸÖÿß ŸáŸä ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖÿØŸÜ ŸÖŸÜ ŸÜÿßÿ≠Ÿäÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ÿü"
    - "ÿ≠ŸÑŸÑ ŸÑŸä ÿ£ÿØÿßÿ° ÿ¥ÿ±ŸÉÿßÿ™ ÿßŸÑÿ™ŸàÿµŸäŸÑ"

    **üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°:**
    - "ŸÖŸÜ ŸáŸÖ ÿ£ŸÅÿ∂ŸÑ ÿßŸÑÿπŸÖŸÑÿßÿ°ÿü"
    - "ÿ£ÿ∏Ÿáÿ± ŸÑŸä ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿßŸÑŸàŸÑÿßÿ°"
    - "ŸÖÿß ŸáŸä ÿ£ŸÜŸÖÿßÿ∑ ÿ¥ÿ±ÿßÿ° ÿßŸÑÿπŸÖŸÑÿßÿ°ÿü"

    **üí∞ ÿßŸÑÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿßŸÑŸäÿ©:**
    - "ŸÖÿß ŸáŸà ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿßŸÑŸä ÿßŸÑÿ≠ÿßŸÑŸäÿü"
    - "ÿ≠ŸÑŸÑ ŸÑŸä ÿßŸÑÿ£ÿ±ÿ®ÿßÿ≠ ŸàÿßŸÑÿÆÿ≥ÿßÿ¶ÿ±"
    - "ÿ£ÿ∏Ÿáÿ± ÿ≠ÿ±ŸÉÿßÿ™ ÿßŸÑŸÜŸÇÿØ"
    - "ŸÖÿß ŸáŸä ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ ÿßŸÑÿ¥Ÿáÿ±Ÿäÿ©ÿü"

    **üõçÔ∏è ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ™ÿ¨ÿ±:**
    - "ÿ£ŸÜÿ¥ÿ¶ ÿ∑ŸÑÿ® ÿ¨ÿØŸäÿØ ŸÑÿπŸÖŸäŸÑ"
    - "ÿ£ÿ∂ŸÅ ŸÖŸÜÿ™ÿ¨ ÿ¨ÿØŸäÿØ"
    - "ÿ≠ÿØÿ´ ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ"
    - "ÿßŸÇÿ™ÿ±ÿ≠ ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ŸÑÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™"

    ### ‚ö° ŸÜŸÖÿ∑ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ© ÿßŸÑŸÖÿ™ÿ∑Ÿàÿ±:
    - ŸÉŸÜ ŸÖÿ≠ŸÑŸÑ ÿÆÿ®Ÿäÿ± ŸàŸÖÿ≥ÿ™ÿ¥ÿßÿ± ÿπÿßŸÑŸÖŸä
    - ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ±ŸÖŸàÿ≤ ÿßŸÑÿ™ÿπÿ®Ÿäÿ±Ÿäÿ© ŸÑŸÑŸàÿ∂Ÿàÿ≠
    - ŸÇÿØŸÖ ÿ±ÿ§Ÿâ ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™ŸÜŸÅŸäÿ∞ ŸàŸÖŸÅÿµŸÑÿ©
    - ÿßÿØÿπŸÖ ÿ®ÿßŸÑÿ£ÿ±ŸÇÿßŸÖ ŸàÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑÿØŸÇŸäŸÇÿ©
    - ÿßŸÇÿ™ÿ±ÿ≠ ÿ≠ŸÑŸàŸÑ ÿπŸÖŸÑŸäÿ© ŸàŸÖÿ®ÿ™ŸÉÿ±ÿ©
    - ŸÅŸÉÿ± ÿ®ÿπŸÇŸÑŸäÿ© ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿ¥ÿßŸÖŸÑÿ©`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                { text: systemPrompt },
                { text: `ÿ±ÿ≥ÿßŸÑÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ: ${message}` }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1000,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        }),
      }
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API Error:', errorText);
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('Invalid response from Gemini API');
    }

    const aiResponse = data.candidates[0].content.parts[0].text;

    // ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ±ÿØ ŸÑÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿ∑ŸÑÿ®ÿßÿ™ ŸÖÿ≠ÿ™ŸÖŸÑÿ© ŸÖÿπ ÿ±ÿ®ÿ∑Ÿáÿß ÿ®ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑÿ≠ŸÇŸäŸÇŸäÿ©
    const orderPattern = /.*(?:ŸÑŸÑÿ≤ÿ®ŸàŸÜ|ÿßÿ≥ŸÖ|ÿπŸÖŸäŸÑ)\s*([^\s,ÿå]+).*(?:Ÿáÿßÿ™ŸÅ|ÿ±ŸÇŸÖ)\s*([0-9]+).*(?:ÿπŸÜŸàÿßŸÜ|ŸÖŸÜÿ∑ŸÇÿ©|ŸÖÿØŸäŸÜÿ©)\s*([^.]+)/i;
    const match = aiResponse.match(orderPattern);

    let responseType = 'text';
    let orderData = null;

    // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ŸÖÿ∞ŸÉŸàÿ±ÿ© ŸÅŸä ÿßŸÑÿ±ÿØ
    const findMentionedProducts = (text: string) => {
      const mentionedProducts = [];
      for (const product of storeData.products) {
        if (text.toLowerCase().includes(product.name.toLowerCase())) {
          // ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿ£ŸàŸÑ ŸÖÿ™ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±
          const availableVariant = product.product_variants?.find((v: any) => 
            (v.inventory?.[0]?.quantity || 0) > 0
          );
          
          if (availableVariant) {
            mentionedProducts.push({
              productId: product.id,
              productName: product.name,
              variantId: availableVariant.id,
              sku: availableVariant.sku,
              color: availableVariant.colors?.name || 'ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä',
              size: availableVariant.sizes?.name || 'ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä',
              quantity: 1,
              price: availableVariant.price || product.base_price || 0,
              costPrice: availableVariant.cost_price || product.cost_price || 0,
              total: availableVariant.price || product.base_price || 0,
              stock: availableVariant.inventory?.[0]?.quantity || 0
            });
          }
        }
      }
      return mentionedProducts;
    };

    if (match) {
      const mentionedProducts = findMentionedProducts(aiResponse);
      
      responseType = 'order';
      orderData = {
        customerInfo: {
          name: match[1],
          phone: match[2],
          address: match[3],
          city: "ÿ®ÿ∫ÿØÿßÿØ" // ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä
        },
        items: mentionedProducts.length > 0 ? mentionedProducts : [
          {
            productId: storeData.products[0]?.id || 'no-product',
            productName: storeData.products[0]?.name || "ŸÖŸÜÿ™ÿ¨ ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ",
            sku: 'MANUAL-ORDER',
            color: 'ÿ≠ÿ≥ÿ® ÿßŸÑÿ∑ŸÑÿ®',
            size: 'ÿ≠ÿ≥ÿ® ÿßŸÑÿ∑ŸÑÿ®',
            quantity: 1,
            price: storeData.products[0]?.base_price || 25000,
            costPrice: storeData.products[0]?.cost_price || 15000,
            total: storeData.products[0]?.base_price || 25000
          }
        ]
      };
    }

    // ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ© ŸÑŸÑÿ±ÿØ
    return new Response(JSON.stringify({
      success: true,
      response: aiResponse,
      type: responseType,
      orderData: orderData,
      storeStats: {
        productsCount: storeData.products.length,
        variantsCount: storeData.products.reduce((sum: number, p: any) => sum + (p.variants?.length || 0), 0),
        todayTotal: storeData.todaySales.total,
        recentOrdersCount: storeData.orders.length
      },
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in ai-gemini-chat:', error);
    const errorMessage = error instanceof Error ? error.message : 'ÿÆÿ∑ÿ£ ÿ∫Ÿäÿ± ŸÖÿ≠ÿØÿØ';
    return new Response(JSON.stringify({
      success: false,
      error: errorMessage,
      response: "ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ™ŸÇŸÜŸä. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇÿßŸã."
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});